/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import Model.MySQL;
import com.formdev.flatlaf.intellijthemes.FlatArcOrangeIJTheme;
import static gui.Product.BrandMap;
import static gui.Product.CategoryMap;
import static gui.SignIn.log1;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Savindi
 */
public class StockBoxInvoice extends javax.swing.JFrame {

    /**
     * Creates new form UserManagement
     */
    private Invoice_1 products;

    public void setProduct(Invoice_1 products) {
        this.products = products;
    }

    public StockBoxInvoice() {
        initComponents();
        loadCategory();
        loadBrand();
        loadTable();
    }

    private void loadCategory() {
        try {

            ResultSet resultSet = MySQL.execute("SELECT * FROM `category` ");

            Vector v = new Vector();
            v.add("Select");

            while (resultSet.next()) {
                v.add(resultSet.getString("name"));
                CategoryMap.put(resultSet.getString("name"), resultSet.getInt("id"));
            }

            DefaultComboBoxModel model1 = new DefaultComboBoxModel(v);
            jComboBox1.setModel(model1);

        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loadBrand() {
        try {

            ResultSet resultSet = MySQL.execute("SELECT * FROM `brand`  ");

            Vector v = new Vector();
            v.add("Select");

            while (resultSet.next()) {
                v.add(resultSet.getString("name"));
                BrandMap.put(resultSet.getString("name"), resultSet.getInt("id"));
            }

            DefaultComboBoxModel model1 = new DefaultComboBoxModel(v);
            jComboBox3.setModel(model1);

        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loadTable() {
        try {
            ResultSet resultSet = MySQL.execute("SELECT * FROM `stock` "
                    + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                    + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                    + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                    + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` "
                    + "INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                    + "ORDER BY `stock`.`exp` ASC  ");

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("stock.id"));
                vector.add(resultSet.getString("product.name"));
                vector.add(resultSet.getString("category.name"));
                vector.add(resultSet.getString("brand.name"));
                vector.add(resultSet.getString("unit.name"));
                vector.add(resultSet.getString("mfd"));
                vector.add(resultSet.getString("exp"));

                String qty = resultSet.getString("stock.qty");
                double qtyDouble = Double.parseDouble(qty);

                int qtyint = (int) qtyDouble;
                String qtyString = String.valueOf(qtyint);

                if (qtyint > 0) {

                    vector.add(qtyString);

                } else {
                    vector.add("Out of Stock");
                }

                vector.add("Rs. " + resultSet.getString("stock.selling_price"));
                vector.add(resultSet.getString("grn_item.buying_price"));

                model.addRow(vector);
                jTable1.setModel(model);

            }
        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jImagePanel22 = new main.JImagePanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField6 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 2));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Quicksand Medium", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setText("Select Product From Stock");

        jImagePanel22.setCenterImage(true);
        jImagePanel22.setImageIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/close.png"))); // NOI18N
        jImagePanel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jImagePanel22MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jImagePanel22Layout = new javax.swing.GroupLayout(jImagePanel22);
        jImagePanel22.setLayout(jImagePanel22Layout);
        jImagePanel22Layout.setHorizontalGroup(
            jImagePanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );
        jImagePanel22Layout.setVerticalGroup(
            jImagePanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        jPanel2.setLayout(new java.awt.GridLayout(2, 6, 10, 5));

        jLabel14.setFont(new java.awt.Font("Quicksand Medium", 0, 12)); // NOI18N
        jLabel14.setText("Category");
        jPanel2.add(jLabel14);

        jLabel3.setFont(new java.awt.Font("Quicksand Medium", 0, 12)); // NOI18N
        jLabel3.setText("Brand");
        jPanel2.add(jLabel3);

        jLabel15.setFont(new java.awt.Font("Quicksand Medium", 0, 12)); // NOI18N
        jLabel15.setText("Sort");
        jPanel2.add(jLabel15);

        jLabel16.setFont(new java.awt.Font("Quicksand Medium", 0, 12)); // NOI18N
        jLabel16.setText("Sort By Date");
        jPanel2.add(jLabel16);

        jComboBox1.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Company", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jPanel2.add(jComboBox1);

        jComboBox3.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Company", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jPanel2.add(jComboBox3);

        jComboBox4.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Price ASC", "Price DESC" }));
        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });
        jPanel2.add(jComboBox4);

        jComboBox5.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "EXP Date ASC", "EXP Date DESC" }));
        jComboBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox5ItemStateChanged(evt);
            }
        });
        jPanel2.add(jComboBox5);

        jLabel2.setFont(new java.awt.Font("Quicksand Medium", 0, 12)); // NOI18N
        jLabel2.setText("Search Product");

        jPanel6.setLayout(new java.awt.GridLayout(2, 6, 10, 5));

        jTable1.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Product Name", "Category", "Brand", "Units", "MFD", "EXP Date", "Qty", "Selling Price (Rs)", "Buying Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
            jTable1.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jTextField6.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField6KeyReleased(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 102, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                                .addGap(220, 220, 220))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jImagePanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jImagePanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(16, 16, 16)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jImagePanel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jImagePanel22MouseClicked
        this.dispose();
    }//GEN-LAST:event_jImagePanel22MouseClicked

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyReleased
        String search = jTextField6.getText();

        try {
            ResultSet resultSet = MySQL.execute("SELECT * FROM `stock` "
                    + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                    + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                    + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                    + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                    + "WHERE `product`.`name` LIKE '%" + search + "%' OR `stock`.`id` = '" + search + "' "
                    + "ORDER BY `stock`.`exp` ASC  ");

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("stock.id"));
                vector.add(resultSet.getString("product.name"));
                vector.add(resultSet.getString("category.name"));
                vector.add(resultSet.getString("brand.name"));
                vector.add(resultSet.getString("unit.name"));
                vector.add(resultSet.getString("mfd"));
                vector.add(resultSet.getString("exp"));

                String qty = resultSet.getString("stock.qty");
                double qtyDouble = Double.parseDouble(qty);

                int qtyint = (int) qtyDouble;
                String qtyString = String.valueOf(qtyint);

                if (qtyint > 0) {

                    vector.add(qtyString);

                } else {
                    vector.add("Out of Stock");
                }

                vector.add("Rs. " + resultSet.getString("stock.selling_price"));
                vector.add(resultSet.getString("grn_item.buying_price"));

                model.addRow(vector);
                jTable1.setModel(model);

            }
        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jTextField6KeyReleased

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        String search = String.valueOf(jComboBox1.getSelectedItem());

        try {

            ResultSet resultSet;

            if (search.equals("Select")) {
                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`exp` ASC  ");
            } else {

                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "WHERE `category`.`name` = '" + search + "' "
                        + "ORDER BY `stock`.`exp` ASC  ");
            }

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("stock.id"));
                vector.add(resultSet.getString("product.name"));
                vector.add(resultSet.getString("category.name"));
                vector.add(resultSet.getString("brand.name"));
                vector.add(resultSet.getString("unit.name"));
                vector.add(resultSet.getString("mfd"));
                vector.add(resultSet.getString("exp"));

                String qty = resultSet.getString("stock.qty");
                double qtyDouble = Double.parseDouble(qty);

                int qtyint = (int) qtyDouble;
                String qtyString = String.valueOf(qtyint);

                if (qtyint > 0) {

                    vector.add(qtyString);

                } else {
                    vector.add("Out of Stock");
                }

                vector.add("Rs. " + resultSet.getString("stock.selling_price"));
                vector.add(resultSet.getString("grn_item.buying_price"));

                model.addRow(vector);
                jTable1.setModel(model);

            }
        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        String search = String.valueOf(jComboBox3.getSelectedItem());

        try {

            ResultSet resultSet;

            if (search.equals("Select")) {
                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`exp` ASC  ");
            } else {

                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "WHERE `brand`.`name` = '" + search + "' "
                        + "ORDER BY `stock`.`exp` ASC  ");
            }

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("stock.id"));
                vector.add(resultSet.getString("product.name"));
                vector.add(resultSet.getString("category.name"));
                vector.add(resultSet.getString("brand.name"));
                vector.add(resultSet.getString("unit.name"));
                vector.add(resultSet.getString("mfd"));
                vector.add(resultSet.getString("exp"));

                String qty = resultSet.getString("stock.qty");
                double qtyDouble = Double.parseDouble(qty);

                int qtyint = (int) qtyDouble;
                String qtyString = String.valueOf(qtyint);

                if (qtyint > 0) {

                    vector.add(qtyString);

                } else {
                    vector.add("Out of Stock");
                }

                vector.add("Rs. " + resultSet.getString("stock.selling_price"));
                vector.add(resultSet.getString("grn_item.buying_price"));

                model.addRow(vector);
                jTable1.setModel(model);

            }
        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
        String search = String.valueOf(jComboBox4.getSelectedItem());

        try {

            ResultSet resultSet;

            if (search.equals("Select")) {
                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`exp` ASC  ");

            } else if (search.equals("Price ASC")) {

                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`selling_price` ASC");

            } else {
                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`selling_price` DESC");
            }

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("stock.id"));
                vector.add(resultSet.getString("product.name"));
                vector.add(resultSet.getString("category.name"));
                vector.add(resultSet.getString("brand.name"));
                vector.add(resultSet.getString("unit.name"));
                vector.add(resultSet.getString("mfd"));
                vector.add(resultSet.getString("exp"));

                String qty = resultSet.getString("stock.qty");
                double qtyDouble = Double.parseDouble(qty);

                int qtyint = (int) qtyDouble;
                String qtyString = String.valueOf(qtyint);

                if (qtyint > 0) {

                    vector.add(qtyString);

                } else {
                    vector.add("Out of Stock");
                }

                vector.add("Rs. " + resultSet.getString("stock.selling_price"));
                vector.add(resultSet.getString("grn_item.buying_price"));

                model.addRow(vector);
                jTable1.setModel(model);

            }
        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jComboBox4ItemStateChanged

    private void jComboBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox5ItemStateChanged
        String search = String.valueOf(jComboBox5.getSelectedItem());

        try {

            ResultSet resultSet;

            if (search.equals("Select")) {
                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`exp` ASC  ");

            } else if (search.equals("EXP Date DESC")) {

                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`exp` DESC ");

            } else {
                resultSet = MySQL.execute("SELECT * FROM `stock` "
                        + "INNER JOIN `product` ON `stock`.`product_id` = `product`.id "
                        + "INNER JOIN `brand` ON `product`.`brand_id` = `brand`.`id` "
                        + "INNER JOIN `category` ON `category`.`id` = `brand`.`category_id` "
                        + "INNER JOIN `unit` ON `unit`.`id` = `product`.`unit_id` INNER JOIN `grn_item` ON `stock`.`id` = `grn_item`.`stock_id`"
                        + "ORDER BY `stock`.`exp` ASC  ");
            }

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("stock.id"));
                vector.add(resultSet.getString("product.name"));
                vector.add(resultSet.getString("category.name"));
                vector.add(resultSet.getString("brand.name"));
                vector.add(resultSet.getString("unit.name"));
                vector.add(resultSet.getString("mfd"));
                vector.add(resultSet.getString("exp"));

                String qty = resultSet.getString("stock.qty");
                double qtyDouble = Double.parseDouble(qty);

                int qtyint = (int) qtyDouble;
                String qtyString = String.valueOf(qtyint);

                if (qtyint > 0) {

                    vector.add(qtyString);

                } else {
                    vector.add("Out of Stock");
                }

                vector.add("Rs. " + resultSet.getString("stock.selling_price"));
                vector.add(resultSet.getString("grn_item.buying_price"));

                model.addRow(vector);
                jTable1.setModel(model);

            }
        } catch (Exception e) {
            e.printStackTrace();
            log1.warning(e.toString());
            JOptionPane.showMessageDialog(this, "Something Went Wrong..", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jComboBox5ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jComboBox1.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        jComboBox4.setSelectedIndex(0);
        jComboBox5.setSelectedIndex(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
            int selectedRow = jTable1.getSelectedRow();
            if (evt.getClickCount() == 2) {

                if (products != null) {

                    

                    products.getStockId().setText(String.valueOf(jTable1.getValueAt(selectedRow, 0)));
                    products.loadProduct();
                    

                    this.dispose();
                }
            }

      

    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        FlatArcOrangeIJTheme.setup();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockBoxInvoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private main.JImagePanel jImagePanel22;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
